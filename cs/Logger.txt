
/**

\mainpage  Пояснительная записка проекта \nm - Журналирование многосредовых приложений
\date 2014-2015

\section SECT1 Аннотация
 Данный документ содержит сведения
 о назначении динамически подключаемой 
 библиотеки \nm -  Журналирование многосредовых приложений.

 Документ является Пояснительной запиской к проекту \nm
и  был создан утилитами 
[Doxygen](http://doxygen.org)
и
[Microsoft's HTML Help Workshop] (http://www.microsoft.com/en-us/download/details.aspx?id=21138).


С утилитой 
[Doxygen](http://doxygen.org)
можно познакомится в документах 
[DOXYGEN И GRAPHVIZ: ДОКУМЕНТИРОВАНИЕ ПРОЕКТОВ НА C#](http://agp1.hx0.ru/dgIntro.html),
[БИБЛИОТЕКА РАЗБОРА АРГУМЕНТОВ КОМАНДНОЙ СТРОКИ (C#, Doxygen и Microsoft's HTML Help Workshop)](http://agp1.hx0.ru/args.html),

\section    SECT2 Общие сведения
Динамически подключаемая библиотека \nm
написана на языке C\# c использованием .Net  версии 4.0.
При разработке юнит-теста для тестирования библиотеки
использовалась [Библиотека разбора аргументов командной строки](http://agp1.hx0.ru/args.html).
Скачать исходный код \nm  можно  по адресу
[http://agp1.hx0.ru/Logger.html](http://agp1.hx0.ru/Logger.html)

\section SECT3  Назначение

Назначение работы библиотеки заключается в выводе
текстовых сообщений различного уровня важности в текстовый
файл (журнал работы приложения), находящийся в том же каталоге, откуда запускается приложение.
Если не задано противное, то журнал работы приложения имеет такое же имя, как и само приложение,
а расширение - не exe, а log.
Например,  [Юнит-тест](@ref test.Program)
строится с  названием    _app.exe_, тогда его журнал будет иметь название _app.log_.
В случае если приложение консольное, есть возможность дублировать некоторые
сообщения в стандартный вывод ошибок.
Кроме того, в библиотеке приводится пример наследования 
от интерфейса IDisposable.

 
\section SECT5  Процедура установки
Постройте динамически подключаемую библиотеку и добавьте ссылку на неё в свой проект.


\section SECT6  Процедура проверки работоспособности
Для тестирования библиотеки используется специальное приложение -
[Юнит-тест](@ref test.Program).
Находящийся в корневом каталоге проекта Файл `test.cmd` содержит
примеры вызова 
[Юнит-тест](@ref test.Program).
Если в результате исполнения файла `test.cmd`
в окне консоли появится текст похожий на следующий: 	


----

    app.exe -v -?  
    to demo 2 threads with Monitor class
    usage:
    app [-?] [-d] [-v] [-l LLL] [-ln NNN] [-s SSS] [-m MAX]  ...
    options:
      -?          		: to see this help: True
      -d          		: debug mode: False
      -v          		: additional info: True
      -l LLL		: log level (1..8): 1
      -ln NNN		: log level name {Spam Debug Warning Stats Error FatalError Info Ignore}: 'Ignore'
      -s SSS		: msecs to sleep: 125
      -m MAX		: to count prime numbers up to MAX (1..): 1000
    '?' means the same as 'help'
    'd' means the same as 'debug'
    'v' means the same as 'verbose'
    'l' means the same as 'log'
    'ln' means the same as 'logName'
    's' means the same as 'sleep'
    'm' means the same as 'max'
    app.exe -d -l 10  -v 
    [08.07.2015 18:55:21]: [Info]		first: next prime is 3
    [08.07.2015 18:55:21]: [Info]		first: next prime is 5
    [08.07.2015 18:55:21]: [Info]		second: next prime is 7
    [08.07.2015 18:55:22]: [Info]		second: next prime is 11
    [08.07.2015 18:55:22]: [Info]		second: next prime is 13
    [08.07.2015 18:55:22]: [Info]		second: next prime is 17
    [08.07.2015 18:55:22]: [Info]		second: next prime is 19
    [08.07.2015 18:55:23]: [Info]		first: next prime is 23
    [08.07.2015 18:55:23]: [Info]		first: next prime is 29
    [08.07.2015 18:55:23]: [Info]		first: next prime is 31
    [08.07.2015 18:55:23]: [Info]		first: next prime is 37
    [08.07.2015 18:55:24]: [Info]		second: next prime is 41
    [08.07.2015 18:55:24]: [Info]		second: next prime is 43
    [08.07.2015 18:55:24]: [Info]		second: next prime is 47
    [08.07.2015 18:55:25]: [Info]		first: next prime is 53
    [08.07.2015 18:55:25]: [Info]		second: next prime is 59
    [08.07.2015 18:55:25]: [Info]		second: next prime is 61
    [08.07.2015 18:55:26]: [Info]		first: next prime is 67
    [08.07.2015 18:55:26]: [Info]		first: next prime is 71
    [08.07.2015 18:55:26]: [Info]		first: next prime is 73
    [08.07.2015 18:55:26]: [Info]		first: next prime is 79
    [08.07.2015 18:55:27]: [Info]		second: next prime is 83
    [08.07.2015 18:55:27]: [Info]		first: next prime is 89
    [08.07.2015 18:55:28]: [Info]		second: next prime is 97
    [08.07.2015 18:55:28]: [Stats]		thread 'first' finished with 53 numbers
    [08.07.2015 18:55:28]: [Info]		second: next prime is 101
    [08.07.2015 18:55:28]: [Stats]		thread 'second' finished with 44 numbers
    [08.07.2015 18:55:28]: [Stats]		time of work is 7,203125 secs


----
то тестирование \nm можно считать успешным.

Содержимое командного файла `test.cmd`:
\verbinclude test.cmd

\section SECT7 Использованные параметры и команды Doxygen-a

При создании документа были использованы следующие 
параметры файла конфигурации,
команды форматирования текста и синонимы для них
(в оригинале markdown), отличные от описанных в 
[DOXYGEN И GRAPHVIZ : ДОКУМЕНТИРОВАНИЕ ПРОЕКТОВ НА C#](http://agp1.hx0.ru/dgIntro.html),
[БИБЛИОТЕКА РАЗБОРА АРГУМЕНТОВ КОМАНДНОЙ СТРОКИ (C#, Doxygen и Microsoft's HTML Help Workshop)](http://agp1.hx0.ru/args.html):


-
    COMPACT_LATEX          = YES.
Видимых отличий в тексте сгенерированных с различными
значениями этого параметра  заметить не удалось,
но размер выходной pdf-файл при  включенном параметре оказывался на четверть меньше.

- 
    ALIASES                = nm=Logger.
Использование параметра позволяет использовать команду \\nm
вместо явного упоминания названия Logger.

-
    '\\section'.
Команда создает новый раздел документа, после слова _section_  сначала
пишется тег для внутренних ссылок, а потом заколовок раздела.

-
'\\verbinclude' - содержимое указанного файла
выводит без форматирования. Этой командой
в документацию было выведено содержимое файла `test.cmd`.
Каталог в котором команда производит поиск задается в параметре EXAMPLE_PATH.

-

EXAMPLE_PATH           = ..
Это каталог с файлами для команды '\\verbinclude'.




-
'\\verbatim', '\\endverbatim'.
'\\verbatim' - отключает форматирование текста,
'\\endverbatim' - включает форматирование.


-
    '\\tableofcontents'.
Команда приводит к некрасивому выводу в pdf-файле,
поэтому не использовалась.


\section SECT8 Замеченные проблемы

По необнаруженным причинам
иногда вывод в журнал продолжается после закрытия файла.
До сих пор не было времени пофиксить проблему.
Оставленные до лучших времен примеры приложений с этой проблемой на момент
создания документации отказались выбрасывать эксепшены и работают хорошо. 
:-((

\section SECT9 Динамическая загрузка \nm

По работе пришлось написать пример использования системы отражения (System.Reflection) для
динамической загрузки библиотеки (то есть, на шаге исполнения, без указания линкеру где находится сборка \nm).
Командой _diff_ (утилита юникса для получения разницы файлов):


----


diff Program.cs ../reflection_dynamic_load/Program.cs 


----
был получен следующий файл  с разницей обоих юнит-тестов:

\verbinclude ./docs/p.diff 

Замечательный пример, демонстрирующий существенное повышение трудоемкости и
ненужности, без острой необходимости, такого программирования.


*/

\section SECT4  Минимальная конфигурация технических и программных средств
